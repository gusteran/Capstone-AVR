
Capstone-AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000026a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b2d  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000881  00000000  00000000  00000e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000422  00000000  00000000  000016f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000534  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000198  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_15>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_16>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  ac:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <_Z6setLEDv>:
    TCCR2 = 0x00;
}

void startIR() {
    // Sets to CTC
    TCCR2 = (1 << WGM21) | (1 << COM20) | (1 << CS20);
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	88 bb       	out	0x18, r24	; 24
  ba:	08 95       	ret

000000bc <_Z8unsetLEDv>:
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	8f 77       	andi	r24, 0x7F	; 127
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	08 95       	ret

000000c4 <_Z6stopIRv>:
  c4:	15 bc       	out	0x25, r1	; 37
  c6:	08 95       	ret

000000c8 <_Z10setupTimerv>:
    //TIMSK = (1 << OCIE2);
    TCNT2 = 0;
}

void setupTimer() {
	OCR0 = 100;
  c8:	84 e6       	ldi	r24, 0x64	; 100
  ca:	81 bf       	out	0x31, r24	; 49
	TCNT0 = 0;
  cc:	12 be       	out	0x32, r1	; 50
	TCCR0 = (1 << WGM01) | (1 << CS01);
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1 << TOIE0);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	87 bf       	out	0x37, r24	; 55
  d6:	08 95       	ret

000000d8 <__vector_16>:
}

ISR(TIMER0_OVF_vect) {
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
	//cli();
    PORTB ^= 1 << IR_LED;
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 58       	subi	r24, 0x80	; 128
  e8:	88 bb       	out	0x18, r24	; 24
	//microseconds++;
	//sei();
}
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <__vector_15>:

ISR(TIMER0_COMP_vect) {
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
	PORTB ^= 1 << IR_LED;
 102:	88 b3       	in	r24, 0x18	; 24
 104:	80 58       	subi	r24, 0x80	; 128
 106:	88 bb       	out	0x18, r24	; 24
	//microseconds++;
}
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <_Z7setupDCv>:



void setupDC() {
	//pre scaler set to (1)
	TCCR3B = (1 << WGM32) | (1 << CS30);
 114:	89 e0       	ldi	r24, 0x09	; 9
 116:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f008a>
	
	//pwm ramp up only mode (count TCNT3 up to OCR3A then stop); 8-bit
	TCCR3A = (1 << WGM30) | (1 << COM3A1) | (1 << COM3A1);
 11a:	81 e8       	ldi	r24, 0x81	; 129
 11c:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f008b>
	
	//define counter pre-set value (this is what we start counting up from)
	TCNT3 = 0;
 120:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
 124:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	
	//define value to count up to (no pre scaler used so can be from 1 to 254)
	OCR3A = 200;
 128:	88 ec       	ldi	r24, 0xC8	; 200
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f0087>
 130:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f0086>

	//the closer TCNT3 is set to 200, the closer we are to 100% duty cycle
	
	//set pins 5 and 6 (PE3 and PE4) only as output
	//DDRE= 0b00011000;
	DDRE |= (1 << LEFT_DC) | (1 << RIGHT_DC);
 134:	82 b1       	in	r24, 0x02	; 2
 136:	88 61       	ori	r24, 0x18	; 24
 138:	82 b9       	out	0x02, r24	; 2
 13a:	08 95       	ret

0000013c <_Z11driveMotorsv>:
}

void driveMotors() {
	//PORTE |= (1 << LEFT_MOTOR ); 
	//PORTE |= (1 << RIGHT_MOTOR);
	PORTG |= (1 << MOTOR_ENABLE);
 13c:	e5 e6       	ldi	r30, 0x65	; 101
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	88 60       	ori	r24, 0x08	; 8
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <_Z10stopMotorsv>:


void stopMotors() {
	//PORTE &= ~(1 << LEFT_MOTOR ); 
	//PORTE &= ~(1 << RIGHT_MOTOR);
	PORTG &= ~(1 << MOTOR_ENABLE);
 148:	e5 e6       	ldi	r30, 0x65	; 101
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	87 7f       	andi	r24, 0xF7	; 247
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <main>:
}

int main(void) {
	microseconds = 0;
 154:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 160:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	unsetLED();
 164:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z8unsetLEDv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	80 e7       	ldi	r24, 0x70	; 112
 16c:	92 e0       	ldi	r25, 0x02	; 2
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x1a>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x24>
 178:	00 00       	nop
	_delay_ms(100);
	setLED();
 17a:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z6setLEDv>
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	84 e3       	ldi	r24, 0x34	; 52
 182:	9c e0       	ldi	r25, 0x0C	; 12
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x30>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x3a>
 18e:	00 00       	nop
	_delay_ms(500);
	unsetLED();
 190:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z8unsetLEDv>
    TCCR2 = (1 << WGM21) | (1 << COM20) | (1 << CS20);
}

inline void setupIR() {
    //cli();
    OCR2 = 110;
 194:	8e e6       	ldi	r24, 0x6E	; 110
 196:	83 bd       	out	0x23, r24	; 35
    DDRB = (1 << IR_LED);
 198:	c0 e8       	ldi	r28, 0x80	; 128
 19a:	c7 bb       	out	0x17, r28	; 23
    TCCR2 = (1 << WGM21) | (1 << COM20) | (1 << CS20);
 19c:	89 e1       	ldi	r24, 0x19	; 25
 19e:	85 bd       	out	0x25, r24	; 37
    //TIMSK = (1 << OCIE2);
    TCNT2 = 0;
 1a0:	14 bc       	out	0x24, r1	; 36
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	84 e3       	ldi	r24, 0x34	; 52
 1a6:	9c e0       	ldi	r25, 0x0C	; 12
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x54>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x5e>
 1b2:	00 00       	nop
	setLED();
	_delay_ms(500);
	unsetLED();
    setupIR();
	_delay_ms(500);
	stopIR();
 1b4:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z6stopIRv>
	sei();
 1b8:	78 94       	sei
	DDRB = (1 << IR_LED);
 1ba:	c7 bb       	out	0x17, r28	; 23
	setupTimer();
 1bc:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10setupTimerv>
	setupDC();
 1c0:	0e 94 8a 00 	call	0x114	; 0x114 <_Z7setupDCv>
		//if(microseconds > 10){
			//PORTB ^= (1 << IR_LED);
			//microseconds = 0;
		//}
		//sei();
		driveMotors();
 1c4:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z11driveMotorsv>
 1c8:	2f ef       	ldi	r18, 0xFF	; 255
 1ca:	83 ed       	ldi	r24, 0xD3	; 211
 1cc:	90 e3       	ldi	r25, 0x30	; 48
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x7a>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x84>
 1d8:	00 00       	nop
		_delay_ms(2000);
		stopMotors();
 1da:	0e 94 a4 00 	call	0x148	; 0x148 <_Z10stopMotorsv>
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	84 e3       	ldi	r24, 0x34	; 52
 1e2:	9c e0       	ldi	r25, 0x0C	; 12
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x90>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x9a>
 1ee:	00 00       	nop
 1f0:	e9 cf       	rjmp	.-46     	; 0x1c4 <main+0x70>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
